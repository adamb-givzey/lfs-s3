# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Make build on release

on:
  release: [published]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    - name: Tidy mod
      run: go mod tidy
    - name: Build
      run: go build -v
    # - name: Archive build
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{matrix.os}}_${{ github.sha }}_build
    #     path: lfs-s3*
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.sha }}
    #     draft: false
    #     prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ release.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: lfs-s3*
        asset_name: $(( matrix.os }} release
        asset_content_type: application/zip
    # - name: GH Release
    #   uses: softprops/action-gh-release@v2.2.2
    #   with:
    #     tag_name: v${{ github.sha}}
    #     name: Release v${{ github.sha }}
    #     files: lfs-s3*
      

    
